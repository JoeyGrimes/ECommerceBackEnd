package com.bookshop.springbootrestdatabookshopmaven.service;

import java.sql.ResultSet;
import java.util.List;
import java.util.Optional;
import java.util.function.Function;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.transaction.Transactional;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Service;


import com.bookshop.springbootrestdatabookshopmaven.dao.AccountDao;
import com.bookshop.springbootrestdatabookshopmaven.entity.AccountEntity;
import com.bookshop.springbootrestdatabookshopmaven.pojo.AccountPojo;


@Service
public class AccountServiceImpl implements AccountService {


	public AccountServiceImpl() {
		// the interface reference variable points to the jdbc implementation class
		// this line is no longer needed after we have autowired bookDao
		// bookDao = new BookDaoJdbcImpl();
	}
	@Autowired
	AccountDao accountDao;
	
	@Override
	public AccountPojo viewAccount(int accountid) {
		Optional<AccountEntity> account = Optional.of(accountDao.findByAccountId(accountid));
		AccountPojo fetchedAccountPojo = null;
		if(account.isPresent()) {
		BeanUtils.copyProperties(account.get(), fetchedAccountPojo);
		}
		return fetchedAccountPojo;
		
	}
	
	
	
	public int login(String email, String password) {
	AccountEntity accountentity = accountDao.findByEmailAndPassword(email, password);
	AccountPojo accountpojo = new AccountPojo();
	BeanUtils.copyProperties(accountentity, accountpojo);
	int id = accountpojo.getAccountId();
	return id;
		
	}
	
	
	public AccountPojo register(AccountPojo accountPojo) {
			AccountEntity newAccountEntity = new AccountEntity();
			BeanUtils.copyProperties(accountPojo, newAccountEntity); // copying the book pojo into a book entity
			accountDao.saveAndFlush(newAccountEntity); // save the entity object in the db
												// this will return the autogenretaed primary key
			accountPojo.setAccountId(newAccountEntity.getAccountId()); // we are copying the autogenerated bookId present in the book entity to the book pojo
			return accountPojo;
		}
		
	
	}
	
	
	
	

	

