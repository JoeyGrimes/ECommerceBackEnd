package com.bookshop.springbootrestdatabookshopmaven.service;

import java.sql.ResultSet;
import java.util.List;
import java.util.Optional;
import java.util.function.Function;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.transaction.Transactional;
import javax.validation.ConstraintViolationException;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import com.bookshop.springbootrestdatabookshopmaven.dao.AccountDao;
import com.bookshop.springbootrestdatabookshopmaven.entity.AccountEntity;
import com.bookshop.springbootrestdatabookshopmaven.model.CreateAccountOutput;
import com.bookshop.springbootrestdatabookshopmaven.pojo.AccountPojo;

import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;
import lombok.extern.apachecommons.CommonsLog;
@CommonsLog
@Service
@AllArgsConstructor
@NoArgsConstructor
public class AccountServiceImpl implements AccountService {

	

	@Autowired
	AccountDao accountDao;

	@Override
	public AccountPojo viewAccount(int accountid) {
		log.info("entered accountserviceimpl viewaccount");
		AccountEntity account = accountDao.findByAccountId(accountid);
		if (account == null) {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "account does not exist");
		} 
		AccountPojo fetchedAccountPojo = new AccountPojo();
		BeanUtils.copyProperties(account, fetchedAccountPojo);
		log.info("exited viewaccount");
		return fetchedAccountPojo;
		
		
	}

	public AccountPojo login(String email, String password) {
		log.info("entered login");
		AccountEntity newAccountEntity = accountDao.findByEmailAndPassword(email, password);
		if (newAccountEntity == null) {
			log.info(email + "failed to login");
			throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Invalid login, please try again");
		}
		AccountPojo accountpojo = new AccountPojo();
		BeanUtils.copyProperties(newAccountEntity, accountpojo); // copying the book pojo into a book entity
		log.info("exited login");
		return accountpojo;
		
	}

	public AccountPojo register(AccountPojo accountPojo) {
		log.info("entered register");
		AccountEntity newAccountEntity = new AccountEntity();
		BeanUtils.copyProperties(accountPojo, newAccountEntity); // copying the book pojo into a book entity
		try {
		newAccountEntity = accountDao.saveAndFlush(newAccountEntity); 
		} catch (DataIntegrityViolationException e) {
			throw new ResponseStatusException(HttpStatus.CONFLICT, "account already exists");
		}
		accountPojo.setAccountId(newAccountEntity.getAccountId()); // we are copying the autogenerated bookId present in
																	// the book entity to the book pojo
		log.info("exited login");
		return accountPojo;

	}

}
